!function(e){"use strict";e.tokenizer=e.tk={version:"0.1"},e.fn.tokenizer=e.fn.tk=function(){var t=this,n=13,r=46,a=8,o=function(e){for(var t=e.concat(),n=0;n<t.length;++n)for(var r=n+1;r<t.length;++r)t[n]===t[r]&&t.splice(r--,1);return t};String.__format||(String.__format=function(){for(var e=arguments[0],t=0;t<arguments.length-1;t++){var n=new RegExp("\\{"+t+"\\}","gm");e=e.replace(n,arguments[t+1])}return e});var i=function(t){var n=e("<div></div>").addClass("tokenizer-values").width(t.width()-7);return n},s=function(){e(".tokenizer-token").remove()},u=function(t){t.each(function(){e(this).remove()})},l=function(t){var n=e("<span></span>").addClass("tokenizer-token").text(t).attr("data-value",t).prepend(e("<span></span>").addClass("tokenizer-token-close").text("x"));return n.on("click",function(){e(this).toggleClass("tokenizer-token-active")}),n.find("span").on("click",function(){u(n)}),n},c=function(t){var n=l(e.fn.tokenizer.defaults.lang.max_all);n.addClass("tokenizer-token-max"),n.removeAttr("data-value"),t.append(n),setTimeout(function(){u(n)},1500)},g=function(){var t=[];return e(".tokenizer-token[data-value]").each(function(){t.push(e(this).attr("data-value"))}),t};if(!arguments.length||e.isPlainObject(arguments[0])){var f=arguments.length?arguments[0]:{};return e(document).on("keypress",function(t){(t.keyCode==r||t.keyCode==a)&&u(e(".tokenizer-token-active"))}),f=e.extend({},e.fn.tokenizer.defaults,f),t.each(function(){var t=e(this);console.log(t);var r=e("<div></div>").addClass("tokenizer-wrapper").width(t.width());t.wrap(r);var a=i(t);t.parent().append(a),t.css("margin-bottom","0px"),t.off().on("keypress",function(r){if(r.keyCode==n){if(r.preventDefault(),""!=e.trim(t.val())){for(var i="s*[",u=0;u<f.characters.length;u++)i+=f.characters[u];i+="]s*";var d=new RegExp(i),m=t.val().split(d);f.max_input>0&&(m=m.splice(0,f.max_input));var m=g().concat(m),v=!1;if(f.max_all>0){var p=m.length;m=m.splice(0,f.max_all),p!=m.length&&(v=!0)}f.repeat||(m=o(m)),s(),e.each(m,function(t,n){n=e.trim(n),a.append(l(n))}),v&&c(a)}t.val("")}})})}switch(arguments[0]){case"get":case"val":if(arguments.length>1)throw new Error("Número de argumentos inválidos, se requiere ('option') solamente");return g();case"set":case"input":if(2!=arguments.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String|Array)");if("string"==typeof arguments[1])t.val(arguments[1]),t.trigger(e.Event("keypress",{keyCode:n}));else{if(!(arguments[1]instanceof Array))throw new Error("Segundo parámetro inválido, se requiere ('option', String|Array)");var d=arguments[1].join(e.fn.tokenizer.defaults.characters[0]);t.val(d),t.trigger(e.Event("keypress",{keyCode:n}))}return t;case"del":case"delete":case"rm":case"remove":if(2!=arguments.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String)");if("string"!=typeof arguments[1])throw new Error("Segundo parámetro inválido, se requiere ('option', String)");return e(".tokenizer-token[data-value='"+arguments[1]+"']").remove(),t;default:throw new Error(String.__format("Opción '{0}' no válida",arguments[0]))}},e.fn.tokenizer.defaults=e.fn.tk.defaults={characters:[",",";"],repeat:!1,max_all:0,max_input:0,lang:{max_all:"Máximo alcanzado"}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,