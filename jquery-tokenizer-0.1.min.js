!function(e){"use strict";e.tokenizer=e.tk={version:"0.1"},e.fn.tokenizer=e.fn.tk=function(){var t=this,n=13,r=46,a=8,o=function(e){for(var t=e.concat(),n=0;n<t.length;++n)for(var r=n+1;r<t.length;++r)t[n]===t[r]&&t.splice(r--,1);return t},i=function(t){var n=e("<div></div>").addClass("tokenizer-values").width(t.width()-7);return n},s=function(){e(".tokenizer-token").remove()},u=function(t){t.each(function(){e(this).remove()})},l=function(t){var n=e("<span></span>").addClass("tokenizer-token").text(t).attr("data-value",t).prepend(e("<span></span>").addClass("tokenizer-token-close").text("x"));return n.on("click",function(){e(this).toggleClass("tokenizer-token-active")}),n.find("span").on("click",function(){u(n)}),n},c=function(t){var n=l(e.fn.tokenizer.defaults.text.max_all);n.addClass("tokenizer-token-max"),n.removeAttr("data-value"),t.append(n),setTimeout(function(){u(n)},1500)},d=function(){var t=[];return e(".tokenizer-token[data-value]").each(function(){t.push(e(this).attr("data-value"))}),t},f=function(e){for(var t="s*[",n=0;n<e.length;n++)t+=e[n];return t+="]s*",new RegExp(t)},v=function(t,n){s(),e.each(t,function(t,r){r=e.trim(r),n.append(l(r))})},p={get:function(e){if(e.length>1)throw new Error("Número de argumentos inválidos, se requiere ('option') solamente");return d()},set:function(r){var a;if(2!=r.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String|Array)");if("string"==typeof r[1])a=r[1];else{if(!(r[1]instanceof Array))throw new Error("Segundo parámetro inválido, se requiere ('option', String|Array)");a=r[1].join(e.fn.tokenizer.defaults.separators[0])}return t.val(a),t.trigger(e.Event("keypress",{keyCode:n})),t},del:function(n){if(2!=n.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String)");if("string"!=typeof n[1])throw new Error("Segundo parámetro inválido, se requiere ('option', String)");return e(".tokenizer-token[data-value='"+n[1]+"']").remove(),t}};if(!arguments.length||e.isPlainObject(arguments[0])){var g=arguments.length?arguments[0]:{};return e(document).on("keydown",function(t){(t.keyCode==r||t.keyCode==a)&&u(e(".tokenizer-token-active"))}),g=e.extend({},e.fn.tokenizer.defaults,g),t.each(function(){var t=e(this);console.log(t);var r=e("<div></div>").addClass("tokenizer-wrapper").width(t.width());t.wrap(r);var a=i(t);t.parent().append(a),t.css("margin-bottom","0px"),t.off().on("keypress",function(r){if(r.keyCode==n){if(r.preventDefault(),""!=e.trim(t.val())){var i=f(g.separators),s=t.val().split(i);g.max_input>0&&(s=s.splice(0,g.max_input));var s=d().concat(s),u=!1;if(g.max_all>0){var l=s.length;s=s.splice(0,g.max_all),l!=s.length&&(u=!0)}g.repeat||(s=o(s)),v(s,a),u&&c(a)}t.val("")}})})}switch(arguments[0]){case"get":case"val":return p.get(arguments);case"set":case"input":return p.set(arguments);case"del":case"delete":case"rm":case"remove":return p.del(arguments);default:throw new Error("Opción '"+arguments[0]+"' no válida")}},e.fn.tokenizer.defaults=e.fn.tk.defaults={separators:[",",";"],repeat:!1,max_all:0,max_input:0,text:{max_all:"Máximo alcanzado"}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,