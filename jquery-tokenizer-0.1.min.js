!function(e){"use strict";e.tokenizer={version:"0.1",KEY_CODE:{ARROW_DOWN:40,ARROW_LEFT:37,ARROW_RIGHT:39,ARROW_TOP:38,BACKSPACE:32,COMMA:188,CTRL:17,DEL:8,DOT:190,ENTER:13,ESC:27,SHIFT:16,SUPR:46,TAB:9}},e.fn.tokenizer=function(){var n=this,t=function(e){for(var n=e.concat(),t=0;t<n.length;++t)for(var r=t+1;r<n.length;++r)n[t]===n[r]&&n.splice(r--,1);return n},r=function(n){var t=e("<div></div>").addClass("tokenizer-values").width(n.width()-7);return t},o=function(){e(".tokenizer-token").remove()},a=function(n){n.each(function(){e(this).remove()})},i=function(n,t){var r=e("<span></span>").addClass("tokenizer-token").text(n).attr("data-value",n).prepend(e("<span></span>").addClass("tokenizer-token-close").text("x"));return r.on("click",t.onClickToken),r.find("span").on("click",function(){a(r)}),r},s=function(n,t){var r=i(e.fn.tokenizer.defaults.text.max_all,t);r.addClass("tokenizer-token-max"),r.removeAttr("data-value"),n.append(r),setTimeout(function(){a(r)},1500)},u=function(){var n=[];return e(".tokenizer-token[data-value]").each(function(){n.push(e(this).attr("data-value"))}),n},l=function(e){for(var n="s*[",t=0;t<e.length;t++)n+=e[t];return n+="]s*",new RegExp(n)},c=function(n,t,r){o(),e.each(n,function(n,o){o=e.trim(o);var a=i(o,r);t.append(a)})},d={get:function(e){if(e.length>1)throw new Error("Número de argumentos inválidos, se requiere ('option') solamente");return u()},set:function(t){var r;if(2!=t.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String|Array)");if("string"==typeof t[1])r=t[1];else{if(!(t[1]instanceof Array))throw new Error("Segundo parámetro inválido, se requiere ('option', String|Array)");r=t[1].join(e.fn.tokenizer.defaults.separators[0])}return n.val(r),n.trigger(e.Event("keydown",{keyCode:e.tokenizer.KEY_CODE.ENTER})),n},del:function(t){if(2!=t.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String)");if("string"!=typeof t[1])throw new Error("Segundo parámetro inválido, se requiere ('option', String)");return a(e(".tokenizer-token[data-value='"+t[1]+"']")),n}};if(!arguments.length||e.isPlainObject(arguments[0])){var f=arguments.length?arguments[0]:{};return e(document).on("keydown",function(n){n.keyCode==e.tokenizer.KEY_CODE.SUPR&&(a(e(".tokenizer-token-active")),f.onDeleteToken())}),f=e.extend({},e.fn.tokenizer.defaults,f),n.each(function(){var n=e(this);console.log(n);var o=e("<div></div>").addClass("tokenizer-wrapper").width(n.width());n.wrap(o);var a=r(n);n.parent().append(a),n.css("margin-bottom","0px"),n.off().on("keydown",function(r){if(r.keyCode==f.keyCodeCreate){if(r.preventDefault(),""!=e.trim(n.val())){var o=l(f.separators),i=n.val().split(o);f.max_input>0&&(i=i.splice(0,f.max_input));var i=u().concat(i),d=!1;if(f.max_all>0){var v=i.length;i=i.splice(0,f.max_all),v!=i.length&&(d=!0)}f.repeat||(i=t(i)),c(i,a,f),d&&s(a,f)}n.val("")}})})}switch(arguments[0]){case"get":case"val":return d.get(arguments);case"set":case"input":return d.set(arguments);case"del":case"delete":case"rm":case"remove":return d.del(arguments);default:throw new Error("Opción '"+arguments[0]+"' no válida")}},e.fn.tokenizer.defaults={separators:[",",";"],keyCodeCreate:e.tokenizer.KEY_CODE.ENTER,repeat:!1,max_all:0,max_input:0,text:{max_all:"Máximo alcanzado"},onClickToken:function(){e(this).toggleClass("tokenizer-token-active")},onDeleteToken:function(){}}}(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS10b2tlbml6ZXItMC4xLmpzIl0sIm5hbWVzIjpbIiQiLCJ0b2tlbml6ZXIiLCJ2ZXJzaW9uIiwiS0VZX0NPREUiLCJBUlJPV19ET1dOIiwiQVJST1dfTEVGVCIsIkFSUk9XX1JJR0hUIiwiQVJST1dfVE9QIiwiQkFDS1NQQUNFIiwiQ09NTUEiLCJDVFJMIiwiREVMIiwiRE9UIiwiRU5URVIiLCJFU0MiLCJTSElGVCIsIlNVUFIiLCJUQUIiLCJmbiIsIiR0aGlzIiwidGhpcyIsIl91bmlxdWVBcnJheSIsImFycmF5IiwiYSIsImNvbmNhdCIsImkiLCJsZW5ndGgiLCJqIiwic3BsaWNlIiwiX2dldFdyYXBwZXJWYWx1ZXMiLCIkaW5wdXQiLCIkd3JhcHBlclZhbHVlcyIsImFkZENsYXNzIiwid2lkdGgiLCJfcmVtb3ZlQWxsVG9rZW4iLCJyZW1vdmUiLCJfcmVtb3ZlVG9rZW4iLCIkdG9rZW5zIiwiZWFjaCIsIl9nZXRUb2tlbiIsInZhbHVlIiwic2V0dGluZ3MiLCIkdG9rZW4iLCJ0ZXh0IiwiYXR0ciIsInByZXBlbmQiLCJvbiIsIm9uQ2xpY2tUb2tlbiIsImZpbmQiLCJfc2hvd01heEFsbCIsImRlZmF1bHRzIiwibWF4X2FsbCIsInJlbW92ZUF0dHIiLCJhcHBlbmQiLCJzZXRUaW1lb3V0IiwiX2dldFZhbHVlcyIsInRva2VucyIsInB1c2giLCJfYnVpbGRSZWdFeHAiLCJzZXBhcmF0b3JzIiwic3RyUmVnIiwiUmVnRXhwIiwiX3ByaW50VG9rZW5zIiwiayIsImVsIiwidHJpbSIsIiR0ayIsIl9vcGVyYXRpb25zIiwiZ2V0IiwiYXJncyIsIkVycm9yIiwic2V0Iiwic3RyIiwiQXJyYXkiLCJqb2luIiwidmFsIiwidHJpZ2dlciIsIkV2ZW50Iiwia2V5Q29kZSIsImRlbCIsImFyZ3VtZW50cyIsImlzUGxhaW5PYmplY3QiLCJkb2N1bWVudCIsImUiLCJvbkRlbGV0ZVRva2VuIiwiZXh0ZW5kIiwiY29uc29sZSIsImxvZyIsIiR3cmFwcGVyIiwid3JhcCIsInBhcmVudCIsImNzcyIsIm9mZiIsImtleUNvZGVDcmVhdGUiLCJwcmV2ZW50RGVmYXVsdCIsInJlZyIsInNwbGl0IiwibWF4X2lucHV0Iiwic2hvd01heCIsImxlbiIsInJlcGVhdCIsInRvZ2dsZUNsYXNzIiwialF1ZXJ5Il0sIm1hcHBpbmdzIjoiQ0FRQyxTQUFXQSxHQUNSLFlBRUFBLEdBQUVDLFdBQ0VDLFFBQVMsTUFDVEMsVUFDSUMsV0FBWSxHQUNaQyxXQUFZLEdBQ1pDLFlBQWEsR0FDYkMsVUFBVyxHQUNYQyxVQUFXLEdBQ1hDLE1BQU8sSUFDUEMsS0FBTSxHQUNOQyxJQUFLLEVBQ0xDLElBQUssSUFDTEMsTUFBTyxHQUNQQyxJQUFLLEdBQ0xDLE1BQU8sR0FDUEMsS0FBTSxHQUNOQyxJQUFLLElBSWJqQixFQUFFa0IsR0FBR2pCLFVBQVksV0FDYixHQUFJa0IsR0FBUUMsS0FHUkMsRUFBZSxTQUFVQyxHQUV6QixJQUFLLEdBRERDLEdBQUlELEVBQU1FLFNBQ0xDLEVBQUksRUFBR0EsRUFBSUYsRUFBRUcsU0FBVUQsRUFDNUIsSUFBSyxHQUFJRSxHQUFJRixFQUFJLEVBQUdFLEVBQUlKLEVBQUVHLFNBQVVDLEVBQzVCSixFQUFFRSxLQUFPRixFQUFFSSxJQUNYSixFQUFFSyxPQUFPRCxJQUFLLEVBRzFCLE9BQU9KLElBRVBNLEVBQW9CLFNBQVVDLEdBQzlCLEdBQUlDLEdBQWlCL0IsRUFBRSxlQUNOZ0MsU0FBUyxvQkFDVEMsTUFBTUgsRUFBT0csUUFBVSxFQUN4QyxPQUFPRixJQUVQRyxFQUFrQixXQUNsQmxDLEVBQUUsb0JBQW9CbUMsVUFFdEJDLEVBQWUsU0FBU0MsR0FDeEJBLEVBQVFDLEtBQUssV0FDVHRDLEVBQUVvQixNQUFNZSxZQUdaSSxFQUFZLFNBQVVDLEVBQU9DLEdBQzdCLEdBQUlDLEdBQVMxQyxFQUFFLGlCQUNFZ0MsU0FBUyxtQkFDVFcsS0FBS0gsR0FDTEksS0FBSyxhQUFjSixHQUNuQkssUUFBUTdDLEVBQUUsaUJBQ0VnQyxTQUFTLHlCQUNUVyxLQUFLLEtB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b250ZW50IjpbIi8qXHJcbiAqICBqcXVlcnktdG9rZW5pemVyIC0gdjAuMVxyXG4gKiAgQSBqUXVlcnkgdG9vbCB0byB0b2tlbml6ZXIgdmFsdWUgb24gaW5wdXRcclxuICogIGh0dHBzOi8vZ2l0aHViLmNvbS9sbWZyZXNuZWRhL2pxdWVyeS10b2tlbml6ZXJcclxuICpcclxuICogIE1hZGUgYnkgTHVpcyBNaWd1ZWwgRi5cclxuICogIFVuZGVyIE1JVCBMaWNlbnNlIChodHRwczovL2dpdGh1Yi5jb20vbG1mcmVzbmVkYS9qcXVlcnktdG9rZW5pemVyL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXHJcbiAqL1xyXG47KGZ1bmN0aW9uICgkKSB7IFxyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgJC50b2tlbml6ZXIgPSB7XHJcbiAgICAgICAgdmVyc2lvbjogXCIwLjFcIixcclxuICAgICAgICBLRVlfQ09ERToge1xyXG4gICAgICAgICAgICBBUlJPV19ET1dOOiA0MCxcclxuICAgICAgICAgICAgQVJST1dfTEVGVDogMzcsXHJcbiAgICAgICAgICAgIEFSUk9XX1JJR0hUOiAzOSxcclxuICAgICAgICAgICAgQVJST1dfVE9QOiAzOCxcclxuICAgICAgICAgICAgQkFDS1NQQUNFOiAzMixcclxuICAgICAgICAgICAgQ09NTUE6IDE4OCxcclxuICAgICAgICAgICAgQ1RSTDogMTcsXHJcbiAgICAgICAgICAgIERFTDogOCxcclxuICAgICAgICAgICAgRE9UOiAxOTAsXHJcbiAgICAgICAgICAgIEVOVEVSOiAxMyxcclxuICAgICAgICAgICAgRVNDOiAyNyxcclxuICAgICAgICAgICAgU0hJRlQ6IDE2LFxyXG4gICAgICAgICAgICBTVVBSOiA0NixcclxuICAgICAgICAgICAgVEFCOiA5XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAkLmZuLnRva2VuaXplciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgJHRoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAvL1BSSVZBVEUgTUVUSE9EU1xyXG4gICAgICAgIHZhciBfdW5pcXVlQXJyYXkgPSBmdW5jdGlvbiAoYXJyYXkpIHtcclxuICAgICAgICAgICAgdmFyIGEgPSBhcnJheS5jb25jYXQoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gaSArIDE7IGogPCBhLmxlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFbaV0gPT09IGFbal0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuc3BsaWNlKGotLSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfZ2V0V3JhcHBlclZhbHVlcyA9IGZ1bmN0aW9uICgkaW5wdXQpIHtcclxuICAgICAgICAgICAgdmFyICR3cmFwcGVyVmFsdWVzID0gJChcIjxkaXY+PC9kaXY+XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoXCJ0b2tlbml6ZXItdmFsdWVzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2lkdGgoJGlucHV0LndpZHRoKCkgLSA3KTtcclxuICAgICAgICAgICAgcmV0dXJuICR3cmFwcGVyVmFsdWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX3JlbW92ZUFsbFRva2VuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAkKFwiLnRva2VuaXplci10b2tlblwiKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9yZW1vdmVUb2tlbiA9IGZ1bmN0aW9uKCR0b2tlbnMpIHtcclxuICAgICAgICAgICAgJHRva2Vucy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgX2dldFRva2VuID0gZnVuY3Rpb24gKHZhbHVlLCBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICB2YXIgJHRva2VuID0gJChcIjxzcGFuPjwvc3Bhbj5cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhcInRva2VuaXplci10b2tlblwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQodmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRhdGEtdmFsdWVcIiwgdmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucHJlcGVuZCgkKFwiPHNwYW4+PC9zcGFuPlwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwidG9rZW5pemVyLXRva2VuLWNsb3NlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChcInhcIikpO1xyXG4gICAgICAgICAgICAkdG9rZW4ub24oXCJjbGlja1wiLCBzZXR0aW5ncy5vbkNsaWNrVG9rZW4pO1xyXG4gICAgICAgICAgICAkdG9rZW4uZmluZChcInNwYW5cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfcmVtb3ZlVG9rZW4oJHRva2VuKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiAkdG9rZW47ICBcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9zaG93TWF4QWxsID0gZnVuY3Rpb24gKCR3cmFwcGVyVmFsdWVzLCBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICB2YXIgJHRva2VuID0gX2dldFRva2VuKCQuZm4udG9rZW5pemVyLmRlZmF1bHRzLnRleHQubWF4X2FsbCwgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAkdG9rZW4uYWRkQ2xhc3MoXCJ0b2tlbml6ZXItdG9rZW4tbWF4XCIpO1xyXG4gICAgICAgICAgICAkdG9rZW4ucmVtb3ZlQXR0cihcImRhdGEtdmFsdWVcIik7XHJcbiAgICAgICAgICAgICR3cmFwcGVyVmFsdWVzLmFwcGVuZCgkdG9rZW4pO1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgX3JlbW92ZVRva2VuKCR0b2tlbik7XHJcbiAgICAgICAgICAgIH0sIDE1MDApXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfZ2V0VmFsdWVzID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbnMgPSBbXTtcclxuICAgICAgICAgICAgJChcIi50b2tlbml6ZXItdG9rZW5bZGF0YS12YWx1ZV1cIikuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0b2tlbnMucHVzaCgkKHRoaXMpLmF0dHIoXCJkYXRhLXZhbHVlXCIpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0b2tlbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBfYnVpbGRSZWdFeHAgPSBmdW5jdGlvbihzZXBhcmF0b3JzKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHJSZWcgPSBcIlxccypbXCI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VwYXJhdG9ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgc3RyUmVnICs9IHNlcGFyYXRvcnNbaV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3RyUmVnICs9IFwiXVxccypcIjtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoc3RyUmVnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9wcmludFRva2VucyA9IGZ1bmN0aW9uICh0b2tlbnMsICR3cmFwcGVyVmFsdWVzLCBzZXR0aW5ncykge1xyXG4gICAgICAgICAgICBfcmVtb3ZlQWxsVG9rZW4oKTtcclxuICAgICAgICAgICAgJC5lYWNoKHRva2VucywgZnVuY3Rpb24gKGssIGVsKSB7XHJcbiAgICAgICAgICAgICAgICBlbCA9ICQudHJpbShlbCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgJHRrID0gX2dldFRva2VuKGVsLCBzZXR0aW5ncylcclxuICAgICAgICAgICAgICAgICR3cmFwcGVyVmFsdWVzLmFwcGVuZCgkdGspO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIF9vcGVyYXRpb25zID0ge1xyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXJncy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTsO6bWVybyBkZSBhcmd1bWVudG9zIGludsOhbGlkb3MsIHNlIHJlcXVpZXJlICgnb3B0aW9uJykgc29sYW1lbnRlXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9nZXRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0cjtcclxuICAgICAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCAhPSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTsO6bWVybyBkZSBhcmd1bWVudG9zIGludsOhbGlkb3MsIHNlIHJlcXVpZXJlICgnb3B0aW9uJywgU3RyaW5nfEFycmF5KVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IGFyZ3NbMV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMV0gaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vYXJyYXkgaW5wdXRcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBhcmdzWzFdLmpvaW4oJC5mbi50b2tlbml6ZXIuZGVmYXVsdHMuc2VwYXJhdG9yc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNlZ3VuZG8gcGFyw6FtZXRybyBpbnbDoWxpZG8sIHNlIHJlcXVpZXJlICgnb3B0aW9uJywgU3RyaW5nfEFycmF5KVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICR0aGlzLnZhbChzdHIpO1xyXG4gICAgICAgICAgICAgICAgJHRoaXMudHJpZ2dlcigkLkV2ZW50KFwia2V5ZG93blwiLCB7IGtleUNvZGU6ICQudG9rZW5pemVyLktFWV9DT0RFLkVOVEVSIH0pKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVsOiBmdW5jdGlvbiAoYXJncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoICE9IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJOw7ptZXJvIGRlIGFyZ3VtZW50b3MgaW52w6FsaWRvcywgc2UgcmVxdWllcmUgKCdvcHRpb24nLCBTdHJpbmcpXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzWzFdID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3JlbW92ZVRva2VuKCQoXCIudG9rZW5pemVyLXRva2VuW2RhdGEtdmFsdWU9J1wiICsgYXJnc1sxXSArIFwiJ11cIikpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTZWd1bmRvIHBhcsOhbWV0cm8gaW52w6FsaWRvLCBzZSByZXF1aWVyZSAoJ29wdGlvbicsIFN0cmluZylcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCB8fCAkLmlzUGxhaW5PYmplY3QoYXJndW1lbnRzWzBdKSkge1xyXG4gICAgICAgICAgICAvL0lOSVQgQklORElOR1xyXG4gICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSAhYXJndW1lbnRzLmxlbmd0aCA/IHt9IDogYXJndW1lbnRzWzBdO1xyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbihcImtleWRvd25cIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gJC50b2tlbml6ZXIuS0VZX0NPREUuU1VQUikge1xyXG4gICAgICAgICAgICAgICAgICAgIF9yZW1vdmVUb2tlbigkKFwiLnRva2VuaXplci10b2tlbi1hY3RpdmVcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9uRGVsZXRlVG9rZW4oKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKHt9LCAkLmZuLnRva2VuaXplci5kZWZhdWx0cywgc2V0dGluZ3MpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICR0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygkaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgdmFyICR3cmFwcGVyID0gJChcIjxkaXY+PC9kaXY+XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKFwidG9rZW5pemVyLXdyYXBwZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2lkdGgoJGlucHV0LndpZHRoKCkpO1xyXG4gICAgICAgICAgICAgICAgJGlucHV0LndyYXAoJHdyYXBwZXIpO1xyXG4gICAgICAgICAgICAgICAgdmFyICR3cmFwcGVyVmFsdWVzID0gX2dldFdyYXBwZXJWYWx1ZXMoJGlucHV0KTtcclxuICAgICAgICAgICAgICAgICRpbnB1dC5wYXJlbnQoKS5hcHBlbmQoJHdyYXBwZXJWYWx1ZXMpO1xyXG4gICAgICAgICAgICAgICAgJGlucHV0LmNzcyhcIm1hcmdpbi1ib3R0b21cIiwgXCIwcHhcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgJGlucHV0Lm9mZigpLm9uKFwia2V5ZG93blwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gc2V0dGluZ3Mua2V5Q29kZUNyZWF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkLnRyaW0oJGlucHV0LnZhbCgpKSAhPSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnID0gX2J1aWxkUmVnRXhwKHNldHRpbmdzLnNlcGFyYXRvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VucyA9ICRpbnB1dC52YWwoKS5zcGxpdChyZWcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udHJvbGFtb3MgbWF4X2lucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2V0dGluZ3MubWF4X2lucHV0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VucyA9IHRva2Vucy5zcGxpY2UoMCwgc2V0dGluZ3MubWF4X2lucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5zID0gX2dldFZhbHVlcygpLmNvbmNhdCh0b2tlbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNob3dNYXggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udHJvbGFtb3MgbWF4X2FsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNldHRpbmdzLm1heF9hbGwgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IHRva2Vucy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gdG9rZW5zLnNwbGljZSgwLCBzZXR0aW5ncy5tYXhfYWxsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuICE9IHRva2Vucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd01heCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2V0dGluZ3MucmVwZWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gX3VuaXF1ZUFycmF5KHRva2Vucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ByaW50VG9rZW5zKHRva2VucywgJHdyYXBwZXJWYWx1ZXMsIHNldHRpbmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvd01heClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfc2hvd01heEFsbCgkd3JhcHBlclZhbHVlcywgc2V0dGluZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vQU5PVEhFUiBSRVFVRVNUXHJcbiAgICAgICAgICAgIHN3aXRjaChhcmd1bWVudHNbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJnZXRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ2YWxcIjpcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfb3BlcmF0aW9ucy5nZXQoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJzZXRcIjpcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2V0IHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9vcGVyYXRpb25zLnNldChhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbFwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImRlbGV0ZVwiOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJtXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX29wZXJhdGlvbnMuZGVsKGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk9wY2nDs24gJ1wiKyBhcmd1bWVudHNbMF0gK1wiJyBubyB2w6FsaWRhXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvL1NFVFRJTkdTXHJcbiAgICAkLmZuLnRva2VuaXplci5kZWZhdWx0cyA9IHtcclxuICAgICAgICBzZXBhcmF0b3JzOiBbXCIsXCIsIFwiO1wiXSxcclxuICAgICAgICBrZXlDb2RlQ3JlYXRlOiAkLnRva2VuaXplci5LRVlfQ09ERS5FTlRFUixcclxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxyXG4gICAgICAgIG1heF9hbGw6IDAsXHJcbiAgICAgICAgbWF4X2lucHV0OiAwLFxyXG4gICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgbWF4X2FsbDogXCJNw6F4aW1vIGFsY2FuemFkb1wiXHJcbiAgICAgICAgfSwgXHJcbiAgICAgICAgb25DbGlja1Rva2VuOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICQodGhpcykudG9nZ2xlQ2xhc3MoXCJ0b2tlbml6ZXItdG9rZW4tYWN0aXZlXCIpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EZWxldGVUb2tlbjogZnVuY3Rpb24gKCkgeyB9XHJcbiAgICB9OyBcclxuXHJcbn0pKGpRdWVyeSk7XHJcblxyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=