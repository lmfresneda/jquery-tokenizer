!function(e){"use strict";e.tokenizer={version:"0.1",KEY_CODE:{ARROW_DOWN:40,ARROW_LEFT:37,ARROW_RIGHT:39,ARROW_TOP:38,BACKSPACE:32,COMMA:188,CTRL:17,DEL:8,DOT:190,ENTER:13,ESC:27,SHIFT:16,SUPR:46,TAB:9}},e.fn.tokenizer=function(){var n=this,t=function(e){for(var n=e.concat(),t=0;t<n.length;++t)for(var r=t+1;r<n.length;++r)n[t]===n[r]&&n.splice(r--,1);return n},r=function(n){var t=e("<div></div>").addClass("tokenizer-values").width(n.width()-7);return t},o=function(n){e(".tokenizer-token",n.parent()).remove()},a=function(n){n.each(function(){e(this).remove()})},i=function(n,t){var r=e("<span></span>").addClass("tokenizer-token").text(n).attr("data-value",n).prepend(e("<span></span>").addClass("tokenizer-token-close").text("x"));return r.on("click",t.onClickToken),r.find("span").on("click",function(){a(r)}),r},s=function(n,t){var r=i(e.fn.tokenizer.defaults.text.max_all,t);r.addClass("tokenizer-token-max"),r.removeAttr("data-value"),n.append(r),setTimeout(function(){a(r)},1500)},l=function(n){var t=[];return e(".tokenizer-token[data-value]",n.parent()).each(function(){t.push(e(this).attr("data-value"))}),t},u=function(e){for(var n="[",t=0;t<e.length;t++)n+=e[t];return n+="]",new RegExp(n)},c=function(n,t,r,a){o(n),e.each(t,function(n,t){if(t=e.trim(t),""!=t){var o=i(t,a);r.append(o)}})},d={get:function(e){if(e.length>1)throw new Error("Número de argumentos inválidos, se requiere ('option') solamente");return l(n)},set:function(t){var r;if(2!=t.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String|Array)");if("string"==typeof t[1])r=t[1];else{if(!(t[1]instanceof Array))throw new Error("Segundo parámetro inválido, se requiere ('option', String|Array)");r=t[1].join(e.fn.tokenizer.defaults.separators[0])}return n.val(r),n.trigger(e.Event("keydown",{keyCode:e.tokenizer.KEY_CODE.ENTER})),n},del:function(t){if(2!=t.length)throw new Error("Número de argumentos inválidos, se requiere ('option', String)");if("string"!=typeof t[1])throw new Error("Segundo parámetro inválido, se requiere ('option', String)");return a(e(".tokenizer-token[data-value='"+t[1]+"']")),n}};if(!arguments.length||e.isPlainObject(arguments[0])){var f=arguments.length?arguments[0]:{};return e(document).on("keydown",function(n){n.keyCode==e.tokenizer.KEY_CODE.SUPR&&(a(e(".tokenizer-token-active")),f.onDeleteToken())}),f=e.extend({},e.fn.tokenizer.defaults,f),n.each(function(){var n=e(this);console.log(n);var o=e("<div></div>").addClass("tokenizer-wrapper").width(n.width());n.wrap(o);var a=r(n);n.parent().append(a),n.css("margin-bottom","0px"),n.off().on("keydown",function(r){if(r.keyCode==f.keyCodeCreate){if(r.preventDefault(),""!=e.trim(n.val())){var o=u(f.separators),i=n.val().split(o);f.max_input>0&&(i=i.splice(0,f.max_input));var i=l(n).concat(i),d=!1;if(f.max_all>0){var v=i.length;i=i.splice(0,f.max_all),v!=i.length&&(d=!0)}f.repeat||(i=t(i)),c(n,i,a,f),d&&s(a,f)}n.val("")}})})}switch(arguments[0]){case"get":case"val":return d.get(arguments);case"set":case"input":return d.set(arguments);case"del":case"delete":case"rm":case"remove":return d.del(arguments);default:throw new Error("Opción '"+arguments[0]+"' no válida")}},e.fn.tokenizer.defaults={separators:[",",";"],keyCodeCreate:e.tokenizer.KEY_CODE.ENTER,repeat:!1,max_all:0,max_input:0,text:{max_all:"Máximo alcanzado"},onClickToken:function(){e(this).toggleClass("tokenizer-token-active")},onDeleteToken:function(){}}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
